/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  publicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  array,
  mapSerializer,
  Serializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  getAccountMetasAndSigners,
  ResolvedAccount,
  ResolvedAccountsWithIndices,
} from '../shared';

// Accounts.
export type DrawFromCandyMachineInstructionAccounts = {
  /** Candy machine account. */
  candyMachine: PublicKey | Pda;
  /** Candy machine mint authority (mint only allowed for the mint_authority). */
  mintAuthority?: Signer;
  /** Payer for the transaction and account allocation (rent). */
  payer?: Signer;
  /**
   * NFT account owner.
   *
   */

  buyer?: PublicKey | Pda;
  /** System program. */
  systemProgram?: PublicKey | Pda;
  /**
   * SlotHashes sysvar cluster data.
   *
   */

  recentSlothashes?: PublicKey | Pda;
};

// Data.
export type DrawFromCandyMachineInstructionData = {
  discriminator: Array<number>;
};

export type DrawFromCandyMachineInstructionDataArgs = {};

export function getDrawFromCandyMachineInstructionDataSerializer(): Serializer<
  DrawFromCandyMachineInstructionDataArgs,
  DrawFromCandyMachineInstructionData
> {
  return mapSerializer<
    DrawFromCandyMachineInstructionDataArgs,
    any,
    DrawFromCandyMachineInstructionData
  >(
    struct<DrawFromCandyMachineInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'DrawFromCandyMachineInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [61, 40, 62, 184, 31, 176, 24, 130],
    })
  ) as Serializer<
    DrawFromCandyMachineInstructionDataArgs,
    DrawFromCandyMachineInstructionData
  >;
}

// Instruction.
export function drawFromCandyMachine(
  context: Pick<Context, 'identity' | 'payer' | 'programs'>,
  input: DrawFromCandyMachineInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplCandyMachine',
    'MGUMqztv7MHgoHBYWbvMyL3E3NJ4UHfTwgLJUQAbKGa'
  );

  // Accounts.
  const resolvedAccounts: ResolvedAccountsWithIndices = {
    candyMachine: {
      index: 0,
      isWritable: true,
      value: input.candyMachine ?? null,
    },
    mintAuthority: {
      index: 1,
      isWritable: false,
      value: input.mintAuthority ?? null,
    },
    payer: { index: 2, isWritable: true, value: input.payer ?? null },
    buyer: { index: 3, isWritable: false, value: input.buyer ?? null },
    systemProgram: {
      index: 4,
      isWritable: false,
      value: input.systemProgram ?? null,
    },
    recentSlothashes: {
      index: 5,
      isWritable: false,
      value: input.recentSlothashes ?? null,
    },
  };

  // Default values.
  if (!resolvedAccounts.mintAuthority.value) {
    resolvedAccounts.mintAuthority.value = context.identity;
  }
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.buyer.value) {
    resolvedAccounts.buyer.value = context.identity.publicKey;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.recentSlothashes.value) {
    resolvedAccounts.recentSlothashes.value = publicKey(
      'SysvarS1otHashes111111111111111111111111111'
    );
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getDrawFromCandyMachineInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
