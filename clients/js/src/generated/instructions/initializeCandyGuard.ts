/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  array,
  bytes,
  mapSerializer,
  Serializer,
  struct,
  u32,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findCandyGuardPda } from '../../hooked';
import {
  expectPublicKey,
  getAccountMetasAndSigners,
  ResolvedAccount,
  ResolvedAccountsWithIndices,
} from '../shared';

// Accounts.
export type InitializeCandyGuardInstructionAccounts = {
  candyGuard?: PublicKey | Pda;
  base: Signer;
  authority?: PublicKey | Pda;
  payer?: Signer;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type InitializeCandyGuardInstructionData = {
  discriminator: Array<number>;
  data: Uint8Array;
};

export type InitializeCandyGuardInstructionDataArgs = { data: Uint8Array };

export function getInitializeCandyGuardInstructionDataSerializer(): Serializer<
  InitializeCandyGuardInstructionDataArgs,
  InitializeCandyGuardInstructionData
> {
  return mapSerializer<
    InitializeCandyGuardInstructionDataArgs,
    any,
    InitializeCandyGuardInstructionData
  >(
    struct<InitializeCandyGuardInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['data', bytes({ size: u32() })],
      ],
      { description: 'InitializeCandyGuardInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [175, 175, 109, 31, 13, 152, 155, 237],
    })
  ) as Serializer<
    InitializeCandyGuardInstructionDataArgs,
    InitializeCandyGuardInstructionData
  >;
}

// Args.
export type InitializeCandyGuardInstructionArgs =
  InitializeCandyGuardInstructionDataArgs;

// Instruction.
export function initializeCandyGuard(
  context: Pick<Context, 'eddsa' | 'identity' | 'payer' | 'programs'>,
  input: InitializeCandyGuardInstructionAccounts &
    InitializeCandyGuardInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplCandyGuard',
    'GGRDy4ieS7ExrUu313QkszyuT9o3BvDLuc3H5VLgCpSF'
  );

  // Accounts.
  const resolvedAccounts: ResolvedAccountsWithIndices = {
    candyGuard: { index: 0, isWritable: true, value: input.candyGuard ?? null },
    base: { index: 1, isWritable: false, value: input.base ?? null },
    authority: { index: 2, isWritable: false, value: input.authority ?? null },
    payer: { index: 3, isWritable: true, value: input.payer ?? null },
    systemProgram: {
      index: 4,
      isWritable: false,
      value: input.systemProgram ?? null,
    },
  };

  // Arguments.
  const resolvedArgs: InitializeCandyGuardInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.candyGuard.value) {
    resolvedAccounts.candyGuard.value = findCandyGuardPda(context, {
      base: expectPublicKey(resolvedAccounts.base.value),
    });
  }
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity.publicKey;
  }
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getInitializeCandyGuardInstructionDataSerializer().serialize(
    resolvedArgs as InitializeCandyGuardInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
