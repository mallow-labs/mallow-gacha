/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  publicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  array,
  bytes,
  mapSerializer,
  option,
  Serializer,
  string,
  struct,
  u32,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findCandyGuardPda } from '../../hooked';
import {
  expectPublicKey,
  getAccountMetasAndSigners,
  ResolvedAccount,
  ResolvedAccountsWithIndices,
} from '../shared';

// Accounts.
export type DrawInstructionAccounts = {
  /** Candy Guard account. */
  candyGuard?: PublicKey | Pda;
  /**
   * Candy Machine program account.
   *
   */

  candyMachineProgram?: PublicKey | Pda;
  /** Candy machine account. */
  candyMachine: PublicKey | Pda;
  /** Payer for the mint (SOL) fees. */
  payer?: Signer;
  /** Minter account for validation and non-SOL fees. */
  buyer?: Signer;
  /**
   * Token Metadata program.
   *
   */

  tokenMetadataProgram?: PublicKey | Pda;
  /** SPL Token program. */
  splTokenProgram?: PublicKey | Pda;
  /** System program. */
  systemProgram?: PublicKey | Pda;
  /**
   * Instructions sysvar account.
   *
   */

  sysvarInstructions?: PublicKey | Pda;
  /**
   * SlotHashes sysvar cluster data.
   *
   */

  recentSlothashes?: PublicKey | Pda;
};

// Data.
export type DrawInstructionData = {
  discriminator: Array<number>;
  mintArgs: Uint8Array;
  group: Option<string>;
};

export type DrawInstructionDataArgs = {
  mintArgs: Uint8Array;
  group: OptionOrNullable<string>;
};

export function getDrawInstructionDataSerializer(): Serializer<
  DrawInstructionDataArgs,
  DrawInstructionData
> {
  return mapSerializer<DrawInstructionDataArgs, any, DrawInstructionData>(
    struct<DrawInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['mintArgs', bytes({ size: u32() })],
        ['group', option(string())],
      ],
      { description: 'DrawInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [61, 40, 62, 184, 31, 176, 24, 130],
    })
  ) as Serializer<DrawInstructionDataArgs, DrawInstructionData>;
}

// Args.
export type DrawInstructionArgs = DrawInstructionDataArgs;

// Instruction.
export function draw(
  context: Pick<Context, 'eddsa' | 'identity' | 'payer' | 'programs'>,
  input: DrawInstructionAccounts & DrawInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplCandyGuard',
    'Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g'
  );

  // Accounts.
  const resolvedAccounts: ResolvedAccountsWithIndices = {
    candyGuard: {
      index: 0,
      isWritable: false,
      value: input.candyGuard ?? null,
    },
    candyMachineProgram: {
      index: 1,
      isWritable: false,
      value: input.candyMachineProgram ?? null,
    },
    candyMachine: {
      index: 2,
      isWritable: true,
      value: input.candyMachine ?? null,
    },
    payer: { index: 3, isWritable: true, value: input.payer ?? null },
    buyer: { index: 4, isWritable: true, value: input.buyer ?? null },
    tokenMetadataProgram: {
      index: 5,
      isWritable: false,
      value: input.tokenMetadataProgram ?? null,
    },
    splTokenProgram: {
      index: 6,
      isWritable: false,
      value: input.splTokenProgram ?? null,
    },
    systemProgram: {
      index: 7,
      isWritable: false,
      value: input.systemProgram ?? null,
    },
    sysvarInstructions: {
      index: 8,
      isWritable: false,
      value: input.sysvarInstructions ?? null,
    },
    recentSlothashes: {
      index: 9,
      isWritable: false,
      value: input.recentSlothashes ?? null,
    },
  };

  // Arguments.
  const resolvedArgs: DrawInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.candyGuard.value) {
    resolvedAccounts.candyGuard.value = findCandyGuardPda(context, {
      base: expectPublicKey(resolvedAccounts.candyMachine.value),
    });
  }
  if (!resolvedAccounts.candyMachineProgram.value) {
    resolvedAccounts.candyMachineProgram.value = context.programs.getPublicKey(
      'mplCandyMachine',
      'CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR'
    );
    resolvedAccounts.candyMachineProgram.isWritable = false;
  }
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.buyer.value) {
    resolvedAccounts.buyer.value = context.identity;
  }
  if (!resolvedAccounts.tokenMetadataProgram.value) {
    resolvedAccounts.tokenMetadataProgram.value = context.programs.getPublicKey(
      'mplTokenMetadata',
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
    );
    resolvedAccounts.tokenMetadataProgram.isWritable = false;
  }
  if (!resolvedAccounts.splTokenProgram.value) {
    resolvedAccounts.splTokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.splTokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.sysvarInstructions.value) {
    resolvedAccounts.sysvarInstructions.value = publicKey(
      'Sysvar1nstructions1111111111111111111111111'
    );
  }
  if (!resolvedAccounts.recentSlothashes.value) {
    resolvedAccounts.recentSlothashes.value = publicKey(
      'SysvarS1otHashes111111111111111111111111111'
    );
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getDrawInstructionDataSerializer().serialize(
    resolvedArgs as DrawInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
